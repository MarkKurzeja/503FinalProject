{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:15,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_updated <- stan_polr(schoolwins ~ ., data = scaled_train_data %>% select(-overallwins, -games, -efg_pct, -ft_rate0),
prior = R2(0.05), prior_counts = dirichlet(1),
chains = 4, cores = 8, seed = 123, iter = 1000)
beepr::beep()
rstan::stan_ac(post0_updated, pars = c("games", "wins_conf", "pts", "ts_pct"), fill = "blue", color = "blue", nrow = 2, ncol = 2)
rstan::stan_ac(post0_updated, pars = c("overallloses", "wins_conf", "pts", "ts_pct"), fill = "blue", color = "blue", nrow = 2, ncol = 2)
rstan::stan_ac(post0_updated, pars = c("overallloses", "wins_conf", "pts", "ts_pct"), fill = "blue", color = "blue", nrow = 2, ncol = 2)
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:15]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:15,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
rstan::stan_ac(post0_updated, pars = c("overalllosses", "wins_conf", "pts", "ts_pct"), fill = "blue", color = "blue", nrow = 2, ncol = 2)
posterior_interval(post0_updated, prob = .95)[1:15,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
data
data %>% select(-key) %>% cor
data %>% select(-key, -schoolwins) %>% cor
data %>% select(-key, -schoolwins) %>% cor %>% heatmap
post0_updated <- stan_polr(schoolwins ~ ., data = scaled_train_data %>% select(-overallwins, -games, -opp_pts, -losses_conf, -efg_pct, -ft_rate0),
prior = R2(0.05), prior_counts = dirichlet(1),
chains = 4, cores = 8, seed = 123, iter = 1000)
beepr::beep()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:15]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:15,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:13]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
predict(post0, train_dat)
predict(post0, train_dat, type = "response")
predict(post0, train_dat, type = "link")
predict(post0, train_dat, type = "response")
head(train_dat)
posterior_predict(post0, train_dat, type = "response")
posterior_predict(post0, train_dat)
k <- posterior_predict(post0, train_dat)
beepr::beep()
k
str(k)
k[1,]
k[2,]
k[,2]
head(train_dat)
table(k[,1])
table(k[,2])
table(k[,3])
table(k[,5])
table(k[1,])
table(k[2,])
table(k[3,])
table(k[4,])
sort(table(k[4,]), decreasing = T)
sort(table(k[5,]), decreasing = T)
sort(table(k[5,]), decreasing = T)[1]
sort(table(k[5,]), decreasing = T)[1] %>% str()
sort(table(k[5,]), decreasing = T)[1] %>% names()
sort(table(k[5,]), decreasing = T) %>% names()
sort(table(k[5,]), decreasing = T) %>% names() %>% .[1]
sort(table(k[5,]), decreasing = T) %>% names() %>% .[1] %>% as.character()
sort(table(k[5,]), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
apply(k, 1, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
k
k[1]
table()
table(k[1,])
table(k[15,])
table(k[,15])
apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
post0_updated <- stan_polr(schoolwins ~ ., data = scaled_train_data %>% select(-overallwins, -games),
prior = R2(0.05), prior_counts = dirichlet(1),
chains = 4, cores = 8, seed = 123, iter = 1000)
beepr::beep()
load(file = "./polr_model_results.stan")
k <- posterior_predict(post0_updated, train_dat)
head(k)
str(k)
table(k[1,])
table(k[2,])
table(k[3,])
table(k[5,])
table(k[8,])
table(k[,1])
table(k[,2])
table(k[,3])
table(k[,5])
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:13]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
train_dat
k <- posterior_predict(post0_updated, scaled_train_data %>% select(-overallwins, -games), draws = 100)
apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
apply(k, 1, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
apply(k, 1, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
pred_result <- apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
scaled_train_data$schoolwins %>% as.numeric()
scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result
# Get the estimates of the coefficients
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:13]} %>%
{apply(., 2, median)}
# Plot the posterior intervals
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
ggsave("../fig/polr_coef.pdf", device = "pdf", height = 4, width = 6)
# plot(post0, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
# plot(post0, plotfun = "hist", pars = "games", include = FALSE)
# plot(post0, plotfun = "trace", pars = c("games"), inc_warmup = TRUE)
# plot(post0, plotfun = "rhat") + ggtitle("Example of adding title to plot")
###############################################################################
#                                                                              #
#           Now work with the names of the schools as predictors too           #
#                                                                              #
################################################################################
# Read in the data
data <- read.csv("../data/503projectdata_clean.csv", header = T, stringsAsFactors = F)
# function for preprocessing the data - aim is to get it into a form that the algo can accept
preprocess <- function(din) {
din %>%
mutate(schoolwins = as.factor(schoolwins)) %>%
mutate(schoolnames = as.factor(schoolnames))
}
data <- preprocess(data)
# split into train and test sets
getTrain <- function() {
data %>% filter(year != 2017)
}
getTest <- function() {
data %>% filter(year == 2017)
}
train_dat <- getTrain()
test_dat <- getTest()
scaled_train_data <- train_dat
scaled_train_data[4:23] <- scale(scaled_train_data[4:23])
scaled_train_data %<>% select(-key)
scaled_train_data %<>% select(- schoolurls)
# Create an indicator to say whether they have won the tournament before
library(rstanarm)
options(mc.cores = 8)
post1 <- stan_polr(schoolwins ~ ., data = scaled_train_data ,
prior = R2(0.05), prior_counts = dirichlet(1),
chains = 4, cores = 8, seed = 123, iter = 1000, algorithm = "sampling")
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result)
k <- posterior_predict(post0_updated, scaled_train_data %>% select(-overallwins, -games), draws = 1000)
pred_result <- apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result)
k <- posterior_predict(post0, scaled_train_data %>% select(-overallwins, -games), draws = 1000)
k <- posterior_predict(post0, scaled_train_data, draws = 1000)
pred_result <- apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result)
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% xtable::xtable()
np <- bayesplot::nuts_params(post0_updated)
bayesplot::mcmc_nuts_energy(np)
ggsave("../fig/polr_chain_convergence.pdf", device = "pdf", height = 4, width = 6)
rstan::stan_ac(post0_updated, pars = c("overalllosses", "wins_conf", "pts", "ts_pct"), fill = "blue", color = "blue", nrow = 2, ncol = 2)
ggsave("../fig/polr_autocorr.pdf", device = "pdf", height = 4, width = 6)
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% xtable::xtable()
k <- posterior_predict(post0, scaled_train_data, draws = 2000)
pred_result <- apply(k, 2, function(i) {
sort(table(i), decreasing = T) %>% names() %>% .[1] %>% as.numeric()
})
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% xtable::xtable()
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% prop.table() %>% xtable::xtable()
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% {rowSums()}
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result)
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% {rowsum(.)}
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result) %>% {rowSums(.)}
table(scaled_train_data$schoolwins %>% as.numeric() %>% {.-1}, pred_result)  %>% xtable::xtable()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:13]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:13,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
ggsave("../fig/polr_coef.pdf", device = "pdf", height = 4, width = 6)
print(post0_updated)
post0_updated %>% as.matrix() %>% as.data.frame()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:17]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:17,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:17]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:17,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
posterior_interval(post0_updated, prob = .95)[1:18,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:18]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:18,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
posterior_interval(post0_updated, prob = .95)[1:17,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_points <- as.matrix(post0_updated) %>%
as.data.frame() %>%
{.[,1:17]} %>%
{apply(., 2, median)}
posterior_interval(post0_updated, prob = .95)[1:17,1:2] %>%
as.data.frame() %>%
mutate(param = rownames(.), median = post0_points) %>%
ggplot(.) +
theme_gray() +
geom_hline(yintercept = 0) +
geom_linerange(aes(x = param, ymin = `2.5%`, ymax = `97.5%`), size = 1.25) +
geom_point(aes(x = param, y = median), color = "red", shape = 15) +
geom_point(aes(x = param, y = `2.5%`), shape = "[", size = 3) +
geom_point(aes(x = param, y = `97.5%`), shape = "]", size = 3) +
ggtitle("95% Credible Intervals for the Log-Odds",
str_wrap("Credible Intervals that contain zero give indication that the overall effect does not differ significant from an odds change of 1.")) +
coord_flip()
post0_updated %>% as.matrix() %>% as.data.frame()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17]
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:18]
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17]
?mutate
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17]
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head()
summarise_each(median = median)
?summarize(each)
?quantile
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
ddply(.variables = 2, function(i) {
data.frame(median = median(i), sd = sd(i), `2.5%` = quantile(probs = 0.25), `97.5%` = quantile(probs = 0.25))
})
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{ddply(., .variables = 2, function(i) {
data.frame(median = median(i), sd = sd(i), `2.5%` = quantile(probs = 0.25), `97.5%` = quantile(probs = 0.25))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>% str()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>% str()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{ddply(., .variables = 2, function(i) {
data.frame(median = median(i, rm.na = T), sd = sd(i), `2.5%` = quantile(probs = 0.25), `97.5%` = quantile(probs = 0.25))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{ddply(.data = ., .variables = 2, .fun = function(i) {
data.frame(median = median(i, rm.na = T), sd = sd(i), `2.5%` = quantile(probs = 0.25), `97.5%` = quantile(probs = 0.25))
})}
data.frame(mean(i))
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{ddply(.data = ., .variables = 2, .fun = function(i) {
data.frame(mean(i))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{ddply(.data = ., .fun = function(i) {
data.frame(mean(i))
})}
?ddply
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{adply(.data = ., 2, .fun = function(i) {
data.frame(mean(i))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{adply(.data = ., 2, .fun = function(i) {
data.frame(median = median(i, rm.na = T), sd = sd(i), `2.5%` = quantile(probs = 0.25), `97.5%` = quantile(probs = 0.25))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>% colMeans()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{adply(.data = ., 1, .fun = function(i) {
data.frame(mean(i))
})}
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{adply(.data = ., 2, .fun = function(i) {
data.frame(mean(i))
})}
warnings()
post0_updated %>% as.matrix() %>% as.data.frame() %>% .[,1:17] %>% head() %>%
{adply(.data = ., 2, .fun = function(i) {
data.frame(mean(i, na.rm = T))
})}
launch_shinystan(post0_updated)
source('C:/Users/Mark/Dropbox/Coding & Data Projects/Retirement PV Calculator/Expense Loan Savings Ramping Schedules.R')
interpDates(today, c("3/18/2018", "4/15/2018", "5/15/2018"),
c(500, 1800, 4500),
linear = F, plot = T ,
title = "Omega Watch", plotFirstDeriv = F)
interpDates(today, c("3/18/2018", "4/8/2018", "5/15/2018"),
c(500, 1800, 4500),
linear = F, plot = T ,
title = "Omega Watch", plotFirstDeriv = F)
x <- rbinom(n = 10000, size = 5, prob = .4111)
quantile(x, probs = 0.9)
prop.table(table(x))
cumsum(prop.table(table(x)))
1 - cumsum(prop.table(table(x)))
x <- rbinom(n = 10000, size = 5, prob = .4161)
quantile(x, probs = 0.9)
1 - cumsum(prop.table(table(x)))
raply(1000, {
x <- rbinom(n = 10000, size = 5, prob = .4161)
1 - cumsum(prop.table(table(x)))[4]
})
raply(1000, {
x <- rbinom(n = 10000, size = 5, prob = .4161)
1 - cumsum(prop.table(table(x)))[4]
}) %>% hist(breaks = 50)
raply(10000, {
x <- rbinom(n = 10000, size = 5, prob = .4161)
1 - cumsum(prop.table(table(x)))[4]
}) %>% hist(breaks = 50)
